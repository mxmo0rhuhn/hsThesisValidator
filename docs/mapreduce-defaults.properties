# Einstellungen des Frameworks
#--------------------------------------------------------------
# 10000L Milisekunden => 10 Sekunden
# 60'000 = 1 Min
# Intervall in Millisekunden in dem Statistiken geladen werden
statisticsPrinterTimeout=10000

# Ein Master hat eine Liste an Tasks, die gerade ausgefuehrt werden. Mit diesem Parameter wird die Groesse dieser Liste beschraenkt. Wenn diese Groesse erreicht worden ist, wartet der Master, bis einige Tasks beenedet wurden, bevor er neue erstellt. Wenn Tasks dieser Liste fehlschlagen, werden sie neu gestartet, bevor komplett neue Tasks erstellt werden.
MaxRunningTasks=10000

# Das Basisverzeichnis, mit dem die FilePersistence arbeitet. Muss beschreibbar sein!
filepersistence.directory=/tmp/filepers

# Durch Kommata getrennte Namen der Plugins, die durch den Loader geladen werden sollen. Moegliche Werte: Socket,Thread
plugins=Socket

#--------------------------------------------------------------
# Thread Plugin

# Anzahl an Threads die als Worker zur Verfuegung gestellt werden wenn dieses Attribut nicht gesetzt ist, werden Kerne +1 verwendet
nThreadWorkers=100

#--------------------------------------------------------------
# Socket Plugin

# Wie lange der Resultat-Status von einem verfuegbaren Resultat in der Liste vom SocketResultCollector gehalten werden soll. Dies passiert, wenn der Agent ein Resultat hat und den SocketWorker darueber informiert. Typischerweise muesste dies der SocketWorker sofort akzeptieren, wordurch der Eintrag aus der Liste geloescht werden kann. (Der SocketWorker hat ja sonst nichts zu tun).
AvailableResultTimeToLive=10000

# Wie lange ein Eintrag von einem SocketWorker in der Liste der Resultat-Stati beim SocketResultCollector bleiben soll. Dieser Eintrag wird gemacht, sobald der SocketWorker einen Task dem Agent uebergibt. Dann registriert er sich naemlich beim SocketResultCollector, dass er an diesem Resultat interessiert ist. Typischerweise existiert also ein solche Eintrag ueber die ganze Dauer, die ein Task auf dem Agent ist - also etwas laenger als die Laufzeit eines Task.
RequestedResultTimeToLive=600000

# Der ResultCleanerTask geht periodisch ueber die Liste der Result-State und prueft, ob es veraltete Eintraege hat, fuer die entweder nie ein Resultat vom SocketAgent angekommen ist oder der SocketWorker ein angekommenes Resultat nie abgeholt hat.
SocketResultCleanupSchedulingDelay=60000

# Die Map-,Reduce- und Combiner Instruction werden serialisiert als Byte-Code zum Agent geschickt. Auf dem Server wird ein Cache verwendet, dass die Serialisierung nicht fuer jeden Task erneut durchgefuehrt werden muss. Dies ist ein LRU Cache und dieser Parameter bestimmt die Anzahl Eintraege im Cache, bevor der aelteste geloescht wird.
ObjectByteCacheSize=30

# Zeit, die gewartet wird, bevor der Task vom Agent als 'nicht-akzeptiert' klassifiziert wird. Dies koennte passieren, wenn der Agent nicht auf auf die Anfrage eines Task reagiert - ist aber sehr unwahrscheinlich, da die Verbindung SocketWorker-SocketAgent 1:1 ist. Wir brauchen das Timeout aber trotzdem, weil er sonst unter umstaenden ewig hangen koennte.
AgentTaskTriggeringTimeout=2000

# Jeder Agent wird periodisch gepingt, um zu schauen, ob er noch existiert. Falls er nicht mehr existiert, wird er vom Pool genommen und muesste sich ggf. selbststaendig neu anmelden. Dieser Parameter bestimmt die Zeitspanne in Millisekunden zwischen zwei Pings an den selben Agent.
AgentPingerDelay=10000

SocketSchedulerPoolSize=1

# Auf diesem Port wird die Registry auf Server/Masterseite gestartet. Dies ist der Standard IANA Simon-Port.
simonport=4753
